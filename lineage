#!/usr/bin/env bash
self_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

if [ $# -lt 1 ];then
  echo "Usage: $0 <crossplane xrd type>/<name>" >&2
  echo "       $(echo $0|sed 's/./ /g') <crossplane claim type>/<name>" >&2
  echo "       $(echo $0|sed 's/./ /g') <crossplane claim type | xrd type >" >&2
  exit -1
fi

if [ "$1" == "--version" ];then
  echo "Version: 1.0"
  exit 0
fi

if [ -z $CACHEDIR ];then
  export CACHEDIR=$(mktemp -d)
  trap "rm -fr $CACHEDIR" EXIT
fi

CRDCACHE=$CACHEDIR/crds.json
XRDCACHE=$CACHEDIR/xrds.json
OTHERCACHE=$CACHEDIR/other.json

if [ ! -f $CRDCACHE ];then
  kubectl get crds -o json >$CRDCACHE &
fi

if [ ! -f $XRDCACHE ];then
  kubectl get compositeresourcedefinitions.apiextensions.crossplane.io -o json >$XRDCACHE &
fi

if [ ! -f $OTHERCACHE ];then
  echo '{}' >$OTHERCACHE
fi

find_other_kind() {
  for group in $(jq -r ".${KIND} // empty" $OTHERCACHE) $(jq -r '.items[].spec|select(.names.kind|ascii_downcase == "'${KIND,,}'").group' $CRDCACHE);do
    crd=${KIND}.${group}
    if kubectl get $crd $NAME >/dev/null;then
      jq <$OTHERCACHE '.+ {"'${KIND}'":"'${group}'"}'|sponge $OTHERCACHE
      echo $crd
      return 0
    fi
  done
}

get_resource() {
  RES=$(echo "$@" |grep -o '[[:alnum:]._-]*/[[:alnum:]._-]*')
  KIND=${RES%%/*}
  NAME=${RES##*/}
}

FIRST="$1";shift

if [ "$FIRST" == "___FZF_ENTER" ];then
  get_resource "$1"
  crd=$(find_other_kind)
  kubectl describe $crd $NAME|less
elif [ "$FIRST" == "___FZF_PREVIEW" ];then
  get_resource "$1"
  if [ "$KIND" == "Object" ];then
    kubectl -o json get $KIND/$NAME|jq -r '.spec.forProvider.manifest | ""+.kind+"/"+.metadata.name+"@"+.metadata.namespace'
  elif [ "$KIND" == "Release" ];then
    kubectl -o json get $KIND/$NAME|jq -r '.spec.forProvider|.chart.name+"@"+.namespace'
  elif [ "$KIND" == "Dependency" ];then
    dependee=$(kubectl -o json get $KIND/$NAME|jq -r '.metadata.labels.dependsOn')
    kubectl -o json get Dependency/${dependee}|jq -r '.metadata.ownerReferences[]|"" + .kind + "/" + .name'
  else
    echo "No preview available.....(suggest one)"
  fi
elif [ "$FIRST" == "___FZF_EDIT" ];then
  CLAIM=$1
  get_resource "$CLAIM"
  crd=$(find_other_kind)
  kubectl edit $crd $NAME
elif [ "$FIRST" == "___FZF_DELETE" ];then
  CLAIM=$1
  get_resource "$CLAIM"
  crd=$(find_other_kind)
  kubectl delete $crd $NAME
elif [ "$FIRST" == "___FZF_YAML" ];then
  CLAIM=$1
  get_resource "$CLAIM"
  crd=$(find_other_kind)
  kubectl get -o yaml $crd $NAME | less
elif [ "$FIRST" == "___FZF_DEFAULT" ];then
  date
  CLAIM=$1
  get_resource "$CLAIM"
  shift
  RES=$(kubectl get $KIND -o json -A|jq -r '.items[]|select(.metadata.name=="'$NAME'").spec.resourceRef|.kind+"/"+.name')
  if [ "$RES" == "/" ];then 
    RES="$CLAIM"
  fi
  kubectl lineage --exclude-types Event,ProviderConfigUsage.aws,ProviderConfigUsage.tf,ProviderConfigUsage.helm,ProviderConfigUsage.kubernetes "$RES" "$@"
else
  get_resource "$FIRST"
  if [ -z $RES -a -z $KIND ];then
    FZF_DEFAULT_COMMAND="kubectl get $FIRST -A -o name" \
    fzf --layout=reverse  \
    --bind 'enter:execute('$0' {})+abort'
  else
    FZF_DEFAULT_COMMAND="$0 ___FZF_DEFAULT $FIRST $@" \
    fzf --no-mouse --header-lines=2 --layout=reverse \
    --preview "$0 ___FZF_PREVIEW {}" \
    --preview-window up:1:hidden:wrap \
    --bind 'enter:execute('$0' ___FZF_ENTER {}),ctrl-q:abort,ctrl-r:reload(eval "$FZF_DEFAULT_COMMAND"),ctrl-p:toggle-preview,ctrl-e:execute('$0' ___FZF_EDIT {}),ctrl-y:execute('$0' ___FZF_YAML {}),ctrl-x:execute('$0' ___FZF_DELETE {})' \
    --header 'CTRL-Q: Quit, ENTER: Describe resource, CTRL-Y: Get Yaml, CTRL-E: Edit resource, CTRL-X: Delete resource, CTRL-R: Reload, CTRL-P: Object preview'
  fi
fi
