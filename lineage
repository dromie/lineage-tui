#!/usr/bin/env bash
self_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

if [ $# -lt 1 ];then
  echo "Usage: $0 <crossplane xrd type>/<name>" >&2
  echo "       $(echo $0|sed 's/./ /g') <crossplane claim type>/<name>" >&2
  echo "       $(echo $0|sed 's/./ /g') <crossplane claim type | xrd type >" >&2
  exit -1
fi

if [ "$1" == "--version" ];then
  echo "Version: 1.0"
  exit 0
fi

if [ -z $CACHEDIR ];then
  export CACHEDIR=$(mktemp -d)
  trap "rm -fr $CACHEDIR" EXIT
fi

CRDCACHE=$CACHEDIR/crds.json
XRDCACHE=$CACHEDIR/xrds.json
OTHERCACHE=$CACHEDIR/other.json

if [ ! -f $CRDCACHE ];then
  kubectl get crds -o json >$CRDCACHE &
fi

if [ ! -f $XRDCACHE ];then
  kubectl get compositeresourcedefinitions.apiextensions.crossplane.io -o json >$XRDCACHE &
fi

if [ ! -f $OTHERCACHE ];then
  echo '{}' >$OTHERCACHE
fi

find_valid_kind() {
  if kubectl get $KIND/$NAME >/dev/null; then
    echo $KIND
    return 0
  fi
  for group in $(jq -r ".${KIND} // empty" $OTHERCACHE) $(jq -r '.items[].spec|select(.names.kind|ascii_downcase == "'${KIND,,}'").group' $CRDCACHE);do
    crd=${KIND}.${group}
    if kubectl get $crd $NAME >/dev/null;then
      jq <$OTHERCACHE '.+ {"'${KIND}'":"'${group}'"}'|sponge $OTHERCACHE
      echo $crd
      return 0
    fi
  done
}

get_exclude_types() {
  if [ -z "$EXCLUDED_TYPES" ];then
    while [ $(stat $CRDCACHE -c "%s") -eq 0 ];do sleep 1;done
    export EXCLUDED_TYPES=$(echo -n 'Event'
    PCU=providerconfigusage
    for group in $(jq -r '.items[].spec|select(.names.kind|ascii_downcase == "'$PCU'").group' $CRDCACHE);do
      echo -n ",$PCU.$group"
    done)
  fi
  echo "$EXCLUDED_TYPES"
}

get_resource() {
  RES=$(echo "$@" |grep -o '[[:alnum:]._-]*/[[:alnum:]._-]*'|head -1)
  KIND=${RES%%/*}
  NAME=${RES##*/}
}

FIRST="$1";shift

if [ "$FIRST" == "___FZF_ENTER" ];then
  clear
  get_resource "$1"
  crd=$(find_valid_kind)
  kubectl describe $crd $NAME |less
elif [ "$FIRST" == "___FZF_PREVIEW" ];then
  get_resource "$1"
  if [ "$KIND" == "Object" ];then
    kubectl -o json get $KIND/$NAME|jq -r '.spec.forProvider.manifest | ""+.kind+"/"+.metadata.name+"@"+.metadata.namespace'
  elif [ "$KIND" == "Release" ];then
    kubectl -o json get $KIND/$NAME|jq -r '.spec.forProvider|.chart.name+"@"+.namespace'
  elif [ "$KIND" == "Dependency" ];then
    dependee=$(kubectl -o json get $KIND/$NAME|jq -r '.metadata.labels.dependsOn')
    kubectl -o json get Dependency/${dependee}|jq -r '.metadata.ownerReferences[]|"" + .kind + "/" + .name'
  else
    echo "No preview available.....(suggest one)"
  fi
elif [ "$FIRST" == "___FZF_EDIT" ];then
  clear
  CLAIM=$1
  get_resource "$CLAIM"
  crd=$(find_valid_kind)
  kubectl edit $crd $NAME
elif [ "$FIRST" == "___FZF_DELETE" ];then
  clear
  RES=$1
  get_resource "$RES"
  crd=$(find_valid_kind)
  CLAIMJ=$(kubectl get $crd $NAME -o json|jq '.spec.claimRef')
  if [ "$CLAIMJ" != "null" ];then
    CLAIMKIND=$(echo $CLAIMJ|jq -r '.kind')
    CLAIMNAME=$(echo $CLAIMJ|jq -r '.name')
    CLAIMAPI=$(echo $CLAIMJ|jq -r '.apiVersion')
    CLAIMAPI=${CLAIMAPI%%/*}
    TEXT="You are trying to delete a Composite resource $crd/$NAME, although it has a claim ${CLAIMKIND}.${CLAIMAPI}/${CLAIMNAME}!\nDo you want to delete the claim instead?"
    if dialog --yesno "$TEXT" 7 $[ ($(echo -e $TEXT|head -1|wc -c)) +3 ];then
      kubectl delete ${CLAIMKIND}.${CLAIMAPI}/${CLAIMNAME} -n $(echo $CLAIMJ|jq -r '.namespace') --wait=false 2>&1| less
      exit 0
    fi
  fi
  TEXT="Are you sure you want to delete $crd/$NAME?"
  if dialog --yesno "$TEXT" 5 $[ $(echo $TEXT|wc -c) +3 ];then
    kubectl delete $crd $NAME 2>&1| less
  fi
elif [ "$FIRST" == "___FZF_YAML" ];then
  clear
  CLAIM=$1
  get_resource "$CLAIM"
  crd=$(find_valid_kind)
  kubectl get -o yaml $crd $NAME | less
elif [ "$FIRST" == "___FZF_COMPOSITION" ];then
  clear
  CLAIM=$1
  get_resource "$CLAIM"
  crd=$(find_valid_kind)
  kubectl -o yaml get compositionrevision $(kubectl -o json get $crd/$NAME|jq -r '.spec.compositionRevisionRef.name') | less 
elif [ "$FIRST" == "__FZF_PAUSECROSSPLANE" ];then
  clear
  CLAIM=$1
  get_resource "$CLAIM"
  crd=$(find_valid_kind)
  STATE=$(kubectl -o json get $crd/$NAME|jq -r '.metadata.annotations["crossplane.io/paused"]')
  if [ "$STATE" == "true" ];then
    TEXT="Are you sure you want to reENABLE crossplane sync on $crd/$NAME?"
    if dialog --yesno "$TEXT" 5 $[ $(echo $TEXT|wc -c) +3 ];then
      kubectl patch $crd/$NAME --type=json --patch --type=json -p '[{"op": "remove", "path": "/metadata/annotations/crossplane.io~1paused"}]' 2>&1|less
    fi
  else
    TEXT="Are you sure you want to DISABLE crossplane sync on $crd/$NAME?"
    if dialog --yesno "$TEXT" 5 $[ $(echo $TEXT|wc -c) +3 ];then
      kubectl patch $crd/$NAME --type=json --patch --type=json -p '[{"op": "add", "path": "/metadata/annotations/crossplane.io~1paused", "value": "true"}]' 2>&1|less
    fi
  fi
elif [ "$FIRST" == "___FZF_COMPOSTIONUPDATE" ];then
  clear
  CLAIM=$1
  get_resource "$CLAIM"
  crd=$(find_valid_kind)
  COMPNAME=$(kubectl -o json get $crd/$NAME|jq -r '.spec.compositionRef.name')
  CURRCOMPREV=$(kubectl -o json get $crd/$NAME|jq -r '.spec.compositionRevisionRef.name')
  LASTCOMPREV=$(kubectl get compositionrevisions.apiextensions.crossplane.io -l "crossplane.io/composition-name=$COMPNAME" -o json|jq -r '.items|max_by(.spec.revision).metadata.name')
  if [ "$CURRCOMPREV" == "$LASTCOMPREV" ];then
    TEXT="$crd/$NAME is already at the latest revision $CURRCOMPREV"
    dialog --msgbox "$TEXT" 5 $[ $(echo $TEXT|wc -c) +3 ]
  else
    TEXT="Are you sure you want to update $crd/$NAME composition revision from $CURRCOMPREV to $LASTCOMPREV?"
    if dialog --yesno "$TEXT" 5 $[ $(echo $TEXT|wc -c) +3 ];then
      kubectl patch $crd/$NAME --type=json --patch '[{"op":"replace","path":"/spec/compositionRef/name", "value": "'$LASTCOMPREV'"}]' 2>&1|less
    fi
  fi
elif [ "$FIRST" == "___FZF_CRANK_DEFAULT" ];then
  date
  CLAIM=$1
  get_resource "$CLAIM"
  shift
  RES=$(kubectl get $KIND -o json -A|jq -r '.items[]|select(.metadata.name=="'$NAME'").spec.resourceRef|.kind+"/"+.name')
  if [ "$RES" == "/" ];then
    RES="$KIND/$NAME"
  fi
  crank beta trace -o wide "$RES"
elif [ "$FIRST" == "___FZF_DEFAULT" ];then
  date
  CLAIM=$1
  get_resource "$CLAIM"
  shift
  RES=$(kubectl get $KIND -o json -A|jq -r '.items[]|select(.metadata.name=="'$NAME'").spec.resourceRef|.kind+"/"+.name')
  if [ "$RES" == "/" ];then 
    RES="$CLAIM"
  fi
  kubectl lineage --exclude-types $(get_exclude_types) "$RES" "$@"
else
  get_resource "$FIRST"
  if [ -z $RES -a -z $KIND ];then
    FZF_DEFAULT_COMMAND="kubectl get $FIRST -A -o name" \
    fzf --layout=reverse  \
    --bind 'enter:execute('$0' {})+abort'
  else
    FZFD=___FZF_DEFAULT
    FZFD_TOGGLE_COMMAND="$0 ___FZF_CRANK_DEFAULT $FIRST $@"
    TOGGLEMODE="CRANK"
    if [ "$MODE" == "CRANK" ];then
      FZFD=___FZF_CRANK_DEFAULT
      FZFD_TOGGLE_COMMAND="$0 ___FZF_DEFAULT $FIRST $@"
      TOGGLEMODE="LINEAGE"
    fi
    FZF_DEFAULT_COMMAND="$0 $FZFD $FIRST $@" \
    fzf --no-mouse --header-lines=2 --layout=reverse \
    --preview "$0 ___FZF_PREVIEW {}" \
    --preview-window up:1:hidden:wrap \
    --bind 'enter:execute('$0' ___FZF_ENTER {}),ctrl-q:abort,ctrl-r:reload(eval "$FZF_DEFAULT_COMMAND"),ctrl-p:toggle-preview,ctrl-e:execute('$0' ___FZF_EDIT {}),ctrl-y:execute('$0' ___FZF_YAML {}),ctrl-x:execute('$0' ___FZF_DELETE {}),ctrl-o:execute('$0' ___FZF_COMPOSITION {}),ctrl-u:execute('$0' ___FZF_COMPOSTIONUPDATE {}),ctrl-f:execute('$0' __FZF_PAUSECROSSPLANE {}),ctrl-i:execute(MODE='$TOGGLEMODE' '$0' '$FIRST')' \
    --header "$(echo -ne "CTRL-Q: Quit, ENTER: Describe resource, CTRL-Y: Get Yaml, CTRL-E: Edit resource, CTRL-R: Reload, CTRL-P: Object preview\nCTRL-X: Delete resource, CTRL-O: Show the actual composition, CTRL-U: Update to latest compostion revision, CTRL-F: Toggle crossplane.io/paused, CTRL-I: $TOGGLEMODE mode")"
  fi
fi
